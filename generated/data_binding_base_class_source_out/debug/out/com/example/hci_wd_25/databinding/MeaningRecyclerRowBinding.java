// Generated by view binder compiler. Do not edit!
package com.example.hci_wd_25.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.hci_wd_25.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MeaningRecyclerRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView antonymsTextview;

  @NonNull
  public final TextView antonymsTitleTextview;

  @NonNull
  public final TextView definitionsTextview;

  @NonNull
  public final TextView partOfSpeechTextview;

  @NonNull
  public final TextView synonymsTextview;

  @NonNull
  public final TextView synonymsTitleTextview;

  private MeaningRecyclerRowBinding(@NonNull LinearLayout rootView,
      @NonNull TextView antonymsTextview, @NonNull TextView antonymsTitleTextview,
      @NonNull TextView definitionsTextview, @NonNull TextView partOfSpeechTextview,
      @NonNull TextView synonymsTextview, @NonNull TextView synonymsTitleTextview) {
    this.rootView = rootView;
    this.antonymsTextview = antonymsTextview;
    this.antonymsTitleTextview = antonymsTitleTextview;
    this.definitionsTextview = definitionsTextview;
    this.partOfSpeechTextview = partOfSpeechTextview;
    this.synonymsTextview = synonymsTextview;
    this.synonymsTitleTextview = synonymsTitleTextview;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MeaningRecyclerRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MeaningRecyclerRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.meaning_recycler_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MeaningRecyclerRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.antonyms_textview;
      TextView antonymsTextview = ViewBindings.findChildViewById(rootView, id);
      if (antonymsTextview == null) {
        break missingId;
      }

      id = R.id.antonyms_title_textview;
      TextView antonymsTitleTextview = ViewBindings.findChildViewById(rootView, id);
      if (antonymsTitleTextview == null) {
        break missingId;
      }

      id = R.id.definitions_textview;
      TextView definitionsTextview = ViewBindings.findChildViewById(rootView, id);
      if (definitionsTextview == null) {
        break missingId;
      }

      id = R.id.part_of_speech_textview;
      TextView partOfSpeechTextview = ViewBindings.findChildViewById(rootView, id);
      if (partOfSpeechTextview == null) {
        break missingId;
      }

      id = R.id.synonyms_textview;
      TextView synonymsTextview = ViewBindings.findChildViewById(rootView, id);
      if (synonymsTextview == null) {
        break missingId;
      }

      id = R.id.synonyms_title_textview;
      TextView synonymsTitleTextview = ViewBindings.findChildViewById(rootView, id);
      if (synonymsTitleTextview == null) {
        break missingId;
      }

      return new MeaningRecyclerRowBinding((LinearLayout) rootView, antonymsTextview,
          antonymsTitleTextview, definitionsTextview, partOfSpeechTextview, synonymsTextview,
          synonymsTitleTextview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
